import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class GSA extends binMeta {

	//List qui contient les data de tous les agents
	//Un agent est défini par sa position (x,y,z), sa masse, sa vitesse et son acceleration
	//Donc tous les 6 éléments de la liste => un nouvel agent
	List<Data> lesAgents;
	
	Data vitesseLumiere;
	Data xMax, yMax, zMax;
	
	
	/**
	 * FITNESS : fontion qui evalue les element de l'ensemble
	 * @param x
	 * @param y
	 * @param z
	 * @return
	 */
	public int fitness(int i) {
		//TODO
		
		return 0;
	}
	
	public void best() {
		//TODO
	}
	
	public void worst() {
		//TODO
	}
	
	//conditions d'arret?
	//collision, out of space, nb iterations, temps execution
	
	//n un nombre choisi qui définit la taille de l'espace
	public GSA(Data data, Objective obj , long maxTime, int n) {
	      try
	      {
	    	  String msg = "Impossible de creer un objet GSA : ";
	    	  if(maxTime <= 0) throw new Exception(msg + " Le temps d'execution max est de 0 ou est negatif");	    	  
	    	  this.maxTime = maxTime;
	    	  if (data == null) throw new Exception(msg + "les data sont Null");
	    	  this.solution = data;
	    	  if(obj == null) throw new Exception(" L'objectif donner est null");
	    	  this.obj=obj;
	    	  this.objValue = objValue;
	    	  this.metaName = "Gravitational Search Algorithm";
	    	  
	    	  
	    	  vitesseLumiere = new Data(1079000000);
	    	  
	    	  xMax = new Data(vitesseLumiere.intValue() * n);
	    	  yMax = new Data(xMax.intValue());
	    	  zMax = new Data(xMax.intValue());
	    	  
	    	  
	      }
	      catch (Exception e)
	      {
	         e.printStackTrace();
	         System.exit(1);
	      }
	}
	
	public void remplirListeAgents() {
		//pour i de 2 à random creer un agent

		Random r = new Random();
		//xMax * yMax * zMaz / 3
		int maxAgents = r.nextInt(xMax.intValue() * yMax.intValue() * zMax.intValue() / 3);
		for(int i = 2; i < maxAgents; i++) {
			creerAgentRandom();
		}
	}
	
	public void creerAgentRandom() {
		Random rand = new Random();

		int x = rand.nextInt(xMax.intValue());
		lesAgents.add(new Data(x));
		
		int y = rand.nextInt(yMax.intValue());
		lesAgents.add(new Data(y));
		
		int z = rand.nextInt(zMax.intValue());
		lesAgents.add(new Data(z));

		//TODO
		int masse = rand.nextInt();
		lesAgents.add(new Data(masse));

		//entre 0 et la vitesse de la lumière (en km/h)
		int vit = rand.nextInt(vitesseLumiere.intValue());
		lesAgents.add(new Data(vit));

		//TODO
		int acc = rand.nextInt();
		lesAgents.add(new Data(acc));
	}
	
	
	@Override
	public void optimize() {

		 Random R = new Random();
	     Data D = new Data(this.solution);
	     long startime = System.currentTimeMillis();
	     
	     remplirListeAgents();
	     
	     //algo \/
	     //initial population v
	     //main loop
	     //fitness
	     //update G, best, worst
	     //calculate M and a
	     //update velocity and pos
	     //end of the loop?
	     //return best solution
	     
	     
	     
	     
	     
	     
	      while (System.currentTimeMillis() - startime < this.maxTime)
	      {
	         // a new solution is generated by flipping a consecutive subset of its bits
	         ArrayList<Data> lD = new ArrayList<Data>();
	         int n = D.numberOfBits();
	         int i = R.nextInt(n);
	         if (i != 0 && i != n - 1)
	         {
	            int j = i + 1 + R.nextInt(n - i - 1);
	            if (j != n - 1)
	            {
	               lD.add(new Data(D,0,i-1));
	               lD.add(new Data(D,i,j-1,true));
	               lD.add(new Data(D,j,n-1));
	               D = new Data(lD);
	            }
	            else
	            {
	               lD.add(new Data(D,0,i-1,true));
	               lD.add(new Data(D,i,n-1));
	               D = new Data(lD);
	            }
	         }
	         else
	         {
	            int j = 1 + R.nextInt(n - 2);
	            lD.add(new Data(D,0,j-1));
	            lD.add(new Data(D,j,n-1,true));
	            D = new Data(lD);
	         }

	         double value = obj.value(D);
	         if (this.objValue > value)
	         {
	            this.objValue = value;
	            this.solution = new Data(D);
	         }
	      }
	}

	// main
	public static void main(String[] args) {
	   
		   
		// BitCounter
		   
		   

		// Fermat
		   
		   
		   
		// ColorPartition
		   
	   }
	   
}
